// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{
    RISC0_PROVER_ELF, RISC0_PROVER_ID
};
use risc0_zkvm::{default_prover, ExecutorEnv, Receipt, sha::Digest};
use subxt::{OnlineClient, PolkadotConfig};
use subxt_signer::sr25519::dev;
use serde::{Deserialize, Serialize};

use codec::Encode;

#[subxt::subxt(runtime_metadata_path = "./metadata.scale")]
pub mod substrate_node {}

// Combined data structure for deserialization
#[derive(Debug, Deserialize, Serialize)]
struct ProofData {
    receipt: Receipt,
    image_id: Digest,
}

#[tokio::main]
async fn main() {
    let api = OnlineClient::<PolkadotConfig>::new().await.unwrap();

    // The well-known Alice account - not for production use
    let signer = dev::alice();

    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    env_logger::init();

    // An executor environment describes the configurations for the zkVM
    // including program inputs.
    // An default ExecutorEnv can be created like so:
    // `let env = ExecutorEnv::builder().build().unwrap();`
    // However, this `env` does not have any inputs.
    //
    // To add add guest input to the executor environment, use
    // ExecutorEnvBuilder::write().
    // To access this method, you'll need to use ExecutorEnv::builder(), which
    // creates an ExecutorEnvBuilder. When you're done adding input, call
    // ExecutorEnvBuilder::build().

    // For example:
    let input: u32 = 15*2^27 + 1;
    let env = ExecutorEnv::builder().write(&input).unwrap().build().unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    // Produce a receipt by proving the specified ELF binary.
    let receipt = prover.prove_elf(env, RISC0_PROVER_ELF).unwrap();

    // TODO: Implement code for retrieving receipt journal here.

    // For example:
    let _output: u32 = receipt.journal.decode().unwrap();

    // Optional: Verify receipt to confirm that recipients will also be able to
    // verify your receipt
    receipt.verify(RISC0_PROVER_ID).unwrap();

    // Deserialize the JSON content into ProofData
    let receipt_bytes = serde_json::to_string(&receipt).unwrap().encode();

    let submit_proof_tx = substrate_node::tx().template().store_and_verify_proof(
        RISC0_PROVER_ID,
        receipt_bytes
    );

    println!("About to submit");

    let events = api
        .tx()
        .sign_and_submit_then_watch_default(&submit_proof_tx, &signer)
        .await.unwrap()
        .wait_for_finalized_success()
        .await.unwrap();


    let proof_verification_event = events.find_first::<substrate_node::template::events::ProofVerified>().unwrap();
    if let Some(event) = proof_verification_event {
        println!("Onchain proof verification success: {event:?}");
    }

}
